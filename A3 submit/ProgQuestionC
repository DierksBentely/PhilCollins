# Graham Pomfret 0595 995
# Computer Organization and Design
# This is a program to prove that a + (b + c) is not always equal to (a + b) + c due to floating point arithmetic being imprecise
.data
	equalNumbers: .asciiz "the numbers are equal"
	diffNumbers: .asciiz "the numbers are not equal"
	# setting float numbers to change to make them not equal
	number1: .float 0.1
	number2: .float 0.2
	number3: .float 1.3
.text
	main:
	# loading float numbers into registers
	lwc1 $f2, number1
	lwc1 $f4, number2
	lwc1 $f6, number3
	
	# (f2 + f4) + f6 = f12
	add.s $f12, $f2, $f4
	add.s $f12, $f12, $f6
	
	# f2 + (f4 + f6) = f14
	add.s $f14, $f4, $f6
	add.s $f14, $f14, $f2
	
	# setting branch condition
	c.eq.s $f12, $f14
	# branching if they are equal, continues if not equal
	bc1t equal
	
	# it will reach here if it doesn't branch
	different:
		# prints numbers are different then closes program
		li $v0, 4
		la $a0, diffNumbers
		syscall
		
		li $v0, 10
		syscall
		
	# it will reach here if it does
	equal: 
		# prints numbers are the same and closes program
		li $v0, 4
		la $a0, equalNumbers
		syscall
		
		li $v0, 10
		syscall
		
	
	
